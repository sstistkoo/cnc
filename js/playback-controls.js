/**
 * playback-controls.js
 * Modul pro ovl√°dac√≠ prvky p≈ôehr√°vaƒçe simulace
 */

// Glob√°ln√≠ promƒõnn√©
let playbackSpeed = 1;
let callbacks = {};

/**
 * Nastav√≠ ovl√°dac√≠ prvky p≈ôehr√°vaƒçe
 * @param {Object} options - Callbacky pro r≈Øzn√© akce p≈ôehr√°vaƒçe
 */
export function setupPlaybackControls(options = {}) {
    const playPauseBtn = document.getElementById('play-pause');
    const stopBtn = document.getElementById('stop');
    const stepForwardBtn = document.getElementById('step-forward');
    const stepBackwardBtn = document.getElementById('step-backward');
    const speedUpBtn = document.getElementById('speed-up');
    const speedDownBtn = document.getElementById('speed-down');
    const speedResetBtn = document.getElementById('speed-reset');
    const speedDisplay = document.getElementById('speed-display');
    const controlsToggleBtn = document.getElementById('controls-toggle');

    let speed = 1;

    if (speedUpBtn) {
        speedUpBtn.addEventListener('click', () => {
            speed *= 2;
            speedDisplay.textContent = `${speed}√ó`;
        });
    }

    if (speedDownBtn) {
        speedDownBtn.addEventListener('click', () => {
            speed /= 2;
            speedDisplay.textContent = `${speed}√ó`;
        });
    }

    if (speedResetBtn) {
        speedResetBtn.addEventListener('click', () => {
            speed = 1;
            speedDisplay.textContent = '1√ó';
        });
    }

    if (playPauseBtn) {
        playPauseBtn.addEventListener('click', () => {
            const isPlaying = playPauseBtn.textContent === '‚ñ∂';
            playPauseBtn.textContent = isPlaying ? '‚è∏' : '‚ñ∂';
            if (isPlaying) {
                callbacks.onPlay?.();
            } else {
                callbacks.onPause?.();
            }
        });
    }

    if (stopBtn) {
        stopBtn.addEventListener('click', () => {
            callbacks.onStop?.();
            if (playPauseBtn) playPauseBtn.textContent = '‚ñ∂';
        });
    }

    if (stepForwardBtn) {
        stepForwardBtn.addEventListener('click', () => callbacks.onStepForward?.());
    }

    if (stepBackwardBtn) {
        stepBackwardBtn.addEventListener('click', () => callbacks.onStepBackward?.());
    }

    // Implementace funkce pro zobrazen√≠/skryt√≠ ovl√°dac√≠ch prvk≈Ø
    if (controlsToggleBtn) {
        controlsToggleBtn.addEventListener('click', () => {
            const controls = document.querySelector('.controls');
            if (controls) {
                controls.classList.toggle('hidden');

                // Aktualizovat ikonu tlaƒç√≠tka podle stavu
                controlsToggleBtn.textContent = controls.classList.contains('hidden') ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è';
            }
        });
    }

    console.log('Playback controls initialized');
}

/**
 * Zmƒõn√≠ rychlost p≈ôehr√°v√°n√≠
 * @param {number} newSpeed - Nov√° rychlost p≈ôehr√°v√°n√≠
 */
function changePlaybackSpeed(newSpeed) {
    // Omezit rychlost na rozumn√Ω rozsah (0.25x a≈æ 16x)
    playbackSpeed = Math.max(0.25, Math.min(newSpeed, 16));

    // Aktualizovat zobrazen√≠
    const speedDisplay = document.getElementById('speed-display');
    if (speedDisplay) {
        speedDisplay.textContent = `${playbackSpeed}√ó`;
    }

    // Zavolat callback
    callbacks.onSpeedChange(playbackSpeed);
}

/**
 * Aktualizuje stav p≈ôehr√°vaƒçe
 * @param {Object} state - Stav simulace
 */
export function updatePlaybackState(state) {
    const playPauseBtn = document.getElementById('play-pause');
    if (playPauseBtn) {
        playPauseBtn.textContent = state.isRunning ? '‚è∏' : '‚ñ∂';
    }
}

/**
 * Z√≠sk√° aktu√°ln√≠ rychlost p≈ôehr√°v√°n√≠
 * @returns {number} Aktu√°ln√≠ rychlost p≈ôehr√°v√°n√≠
 */
export function getPlaybackSpeed() {
    return 1; // V√Ωchoz√≠ rychlost
}
